{"version":3,"sources":["DrumPad.jsx","Display.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","playSound","audio","document","getElementById","state","hotkey","currentTime","console","log","id","volume","play","displayPlayed","pad","audioID","audioSource","bind","assertThisInitialized","react_default","a","createElement","onClick","className","src","Component","Display","makePads","pads","drumpads","map","i","src_DrumPad_0","key","padPlayedId","setState","played","App","loadScripts","url","script","async","body","appendChild","src_Display_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5c5e6d1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Styling\nimport './DrumPad.css';\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.pad.id,\n      hotkey: this.props.pad.hotkey,\n      audioID: this.props.pad.audioID,\n      audioSource: this.props.pad.audioSource\n    }\n    this.playSound = this.playSound.bind(this);\n  }\n\n  // On click or key-press, play associated sound\n  playSound = () => {\n    let audio = document.getElementById(this.state.hotkey);\n    audio.currentTime = 0;\n    console.log(\"Clicked \" + this.state.id);\n    \n    // Optional: Adjusting volume\n    audio.volume = 0.5;\n    // console.log(\"Audio adjusted\");\n\n    // Play audio clip\n    audio.play();\n\n    // Use callback function to udpate display in parent\n    this.props.displayPlayed(this.state.id);\n  }\n\n\n  /*\n   * Get drum-pad props\n   * 1 - Audio clip id\n   * 2 - keyboard key id\n   * 3 - Audio element\n   */\n\n  // Instantiate a drum-pad from props  \n  render() {\n    return (\n\n      <div onClick={this.playSound} className=\"drum-pad\" id={this.state.id}>\n        {this.state.hotkey}\n        <audio className=\"clip\" id={this.state.hotkey} src={this.state.audioSource} />\n      </div>\n    );\n  }\n}\n\n\nexport default DrumPad;","import React, { Component } from 'react';\nimport DrumPad from './DrumPad';\n\n// Styling\nimport './Display.css';\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      played: \" \"\n    }\n    this.displayPlayed = this.displayPlayed.bind(this);\n  }\n\n  // Lifecycle: after component mounts, pre-rendering\n  componentDidMount() {\n    console.log(this.props.pads);\n    // console.log(this.props.pads.drumpads[0]);\n  }\n\n  // Take JS object from parent listing # of pads and respective notes\n  \n\n  // Instantiate a DrumPad component per pad\n  makePads = () => {\n    // Turn each drumpad object in the drumpads array into its own component\n    const allPads = (this.props.pads.drumpads).map((drumpads, i) => \n      // Gave each pad a key to avoid \"Each child should have a key\" error\n      <DrumPad pad={drumpads} displayPlayed={this.displayPlayed} key={i} />\n    );\n\n    return allPads;\n  }\n\n  // Display/update most recently played note\n  // Callback function: pass into pads\n  displayPlayed = (padPlayedId) => {\n    // Set state\n    this.setState({\n      played: padPlayedId\n    })\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"display\">\n        <div id=\"playedDisplay\">\n          <p id=\"clipName\">{this.state.played}</p>\n        </div>\n        {this.makePads()}\n      </div>\n    );\n  }\n}\n\n\nexport default Display;","import React, { Component } from 'react';\n\n// Styling\nimport './App.css';\n\n// Components\nimport Display from './Display';\n\n// Data: drum pads\nimport pads from './data/DrumPads.json';\n\n// URL(s) for scripts to load\nconst test = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n\n// Class: App\nclass App extends Component {\n  // Constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n  \n  // Lifecycle: \n  componentDidMount() {\n    // Enable for testing, otherwise leave disabled\n    // this.loadScripts(test);\n  }\n\n  /** \n   * loads script into document \n   * @param {string} url - URL/source of script\n   */\n  loadScripts = (url) => {\n    const script = document.createElement(\"script\");\n    script.src = url;\n    script.async = true;\n    document.body.appendChild(script);\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <Display pads={pads} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}