{"version":3,"sources":["DrumPad.jsx","Display.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","keyCode","state","keycode","playSound","audio","document","getElementById","hotkey","currentTime","volume","play","displayPlayed","id","pad","audioID","audioSource","bind","assertThisInitialized","addEventListener","removeEventListener","react_default","a","createElement","className","onClick","src","Component","Display","makePads","pads","drumpads","map","i","src_DrumPad_0","key","padPlayedId","setState","played","App","loadScripts","url","script","async","body","appendChild","classList","add","remove","src_Display_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.452abce8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Styling\nimport './DrumPad.css';\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.pad.id,\n      hotkey: this.props.pad.hotkey,\n      keycode: this.props.pad.keycode,\n      audioID: this.props.pad.audioID,\n      audioSource: this.props.pad.audioSource\n    }\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyDown.bind(this);\n  }\n\n  // Lifecycle: after component mounts, pre-rendering\n  componentDidMount() {\n    // Add event listener for keypresses\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  // Lifecycle: Remove modifications made in componentDidMount\n  componentWillUnmount() {\n    // Remove keypress event listener\n    document.removeEventListener(\"keydown\");\n  }\n\n  // Handles keydowns from event listener\n  handleKeyDown = (event) => {\n    // Play component sound if key matches keycode\n    if (event.keyCode === this.state.keycode) {\n      this.playSound();\n    }\n  }\n\n  // On click or key-press, play associated sound\n  playSound = () => {\n    let audio = document.getElementById(this.state.hotkey);\n    // set currentTime to 0 to reset play\n    audio.currentTime = 0;\n\n    // Optional: Adjusting volume\n    audio.volume = 0.20;\n    // console.log(\"Audio adjusted\");\n\n    // Play audio clip\n    audio.play();\n\n    // Optional: log note played\n    // console.log(this.state.id);\n\n    // Use callback function to udpate most recent note played in parent display\n    this.props.displayPlayed(this.state.id);\n  }\n\n  // Instantiate a drum-pad from props  \n  render() {\n    return (\n      <div className=\"grid-pad\">\n\n        <div className=\"padId\">\n          {this.state.audioID}\n        </div>\n\n        <div onClick={this.playSound} className=\"drum-pad\" id={this.state.id}>\n          <div className=\"pad-text\">\n            {this.state.hotkey}\n          </div>\n          <audio className=\"clip\" id={this.state.hotkey} src={this.state.audioSource} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default DrumPad;","import React, { Component } from 'react';\nimport DrumPad from './DrumPad';\n\n// Styling\nimport './Display.css';\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      played: \"Play Something\"\n    }\n    this.displayPlayed = this.displayPlayed.bind(this);\n  }\n\n  // Lifecycle: after component mounts, pre-rendering\n  componentDidMount() {\n\n  }\n\n  // Remove modifications made in componentDidMount\n  componentWillUnmount() {\n\n  }\n\n  /* Turns each drumpad object into its own DrumPad component\n   * Returns multiple DrumPad components, so do not render directly\n   * Note: Gives each pad a key since \"each child should have a key prop\" \n   */\n  makePads = () => {\n    const allPads = (this.props.pads.drumpads).map((drumpads, i) =>\n      <DrumPad pad={drumpads} displayPlayed={this.displayPlayed} key={i} />\n    );\n    return allPads;\n  }\n\n  // Callback function that displays the most recently played note\n  displayPlayed = (padPlayedId) => {\n    this.setState({\n      played: padPlayedId\n    })\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"display\">\n        <div id=\"display-grid\">\n          <div id=\"pad-played\">\n            <p id=\"clipName\">{this.state.played}</p>\n          </div>\n          {this.makePads()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Display;","import React, { Component } from 'react';\n\n// Styling\nimport './App.css';\n\n// Components\nimport Display from './Display';\n\n// Data: drum pads\nimport pads from './data/DrumPads.json';\n\n// URL(s) for scripts to load\n// let test = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n\n// Class: App\nclass App extends Component {\n  // Constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n  \n  // Lifecycle: after component mounts, pre-rendering\n  componentDidMount() {\n    // Enable to use FCC test suite. Disable when building to GH Pages\n    // this.loadScripts(test);\n    \n    // Body styling\n    document.body.classList.add(\"body-style\");\n  }\n\n  // Lifecycle: Remove modifications made in componentDidMount\n  componentWillUnmount() {\n    // Remove Body styling\n    document.body.classList.remove(\"body-style\");\n  }\n\n  /** \n   * loads script into document \n   * @param {string} url - URL/source of script\n   */\n  loadScripts = (url) => {\n    const script = document.createElement(\"script\");\n    script.src = url;\n    script.async = true;\n    document.body.appendChild(script);\n  }\n\n  \n\n  // Render\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <Display pads={pads} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}