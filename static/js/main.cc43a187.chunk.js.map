{"version":3,"sources":["DrumPad.jsx","Display.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DrumPad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","keyCode","state","keycode","playSound","audio","document","getElementById","hotkey","currentTime","console","log","id","volume","play","displayPlayed","pad","audioID","audioSource","bind","assertThisInitialized","addEventListener","removeEventListener","react_default","a","createElement","onClick","className","src","Component","Display","makePads","pads","drumpads","map","i","src_DrumPad_0","key","padPlayedId","setState","played","tabIndex","onKeyDown","handleKeyPress","App","loadScripts","url","script","async","body","appendChild","src_Display_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc43a187.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n// Styling\nimport './DrumPad.css';\n\nclass DrumPad extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.pad.id,\n      hotkey: this.props.pad.hotkey,\n      keycode: this.props.pad.keycode,\n      audioID: this.props.pad.audioID,\n      audioSource: this.props.pad.audioSource\n    }\n    this.playSound = this.playSound.bind(this);\n    this.handleKeyDown.bind(this);\n  }\n\n  // Lifecycle: after component mounts, pre-rendering\n  componentDidMount() {\n    // Add event listener for keypresses\n    document.addEventListener(\"keydown\", this.handleKeyDown);\n  }\n\n  // Lifecycle: Remove modifications made in componentDidMount\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\");\n  }\n\n  // Function to deal with keyboard actions\n  handleKeyDown = (event) => {\n    // console.log(\"key: \" + event.key);\n    // Play corresponding sound if key matches keycode\n    if (event.keyCode === this.state.keycode) {\n      // console.log(\"Event match\");\n      this.playSound();\n    }\n\n    // Depending on keypress, access child Drumpad component, and play\n  }\n\n  // On click or key-press, play associated sound\n  playSound = () => {\n    let audio = document.getElementById(this.state.hotkey);\n    // set currentTime to 0 to reset play\n    audio.currentTime = 0;\n    console.log(\"Clicked \" + this.state.id);\n    \n    // Optional: Adjusting volume\n    audio.volume = 0.5;\n    // console.log(\"Audio adjusted\");\n\n    // Play audio clip\n    audio.play();\n\n    // Use callback function to udpate display in parent\n    this.props.displayPlayed(this.state.id);\n  }\n\n  /*\n   * Get drum-pad props\n   * 1 - Audio clip id\n   * 2 - keyboard key id\n   * 3 - Audio element\n   */\n\n  // Instantiate a drum-pad from props  \n  render() {\n    return (\n      <div onClick={this.playSound} className=\"drum-pad\" id={this.state.id}>\n        {this.state.hotkey}\n        <audio className=\"clip\" id={this.state.hotkey} src={this.state.audioSource} />\n      </div>\n    );\n  }\n}\n\n\nexport default DrumPad;","import React, { Component } from 'react';\nimport DrumPad from './DrumPad';\n\n// Styling\nimport './Display.css';\n\nclass Display extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      played: \" \"\n    }\n    this.displayPlayed = this.displayPlayed.bind(this);\n  }\n\n  // Lifecycle: after component mounts, pre-rendering\n  componentDidMount() {\n    console.log(this.props.pads);\n    \n  }\n\n  // Remove modifications made in componentDidMount\n  componentWillUnmount() {\n\n  }\n\n  // Instantiate a DrumPad component per pad\n  makePads = () => {\n    // Turn each drumpad object in the drumpads array into its own component\n    const allPads = (this.props.pads.drumpads).map((drumpads, i) => \n      // Gave each pad a key to avoid \"Each child should have a key\" error\n      <DrumPad pad={drumpads} displayPlayed={this.displayPlayed} key={i} />\n    );\n\n    return allPads;\n  }\n\n  // Display/update most recently played note\n  // Callback function: pass into pads\n  displayPlayed = (padPlayedId) => {\n    // Set state\n    this.setState({\n      played: padPlayedId\n    })\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"display\" tabIndex=\"1\" onKeyDown={this.handleKeyPress}>\n        <div id=\"playedDisplay\">\n          <p id=\"clipName\">{this.state.played}</p>\n        </div>\n        {this.makePads()}\n      </div>\n    );\n  }\n}\n\n\nexport default Display;","import React, { Component } from 'react';\n\n// Styling\nimport './App.css';\n\n// Components\nimport Display from './Display';\n\n// Data: drum pads\nimport pads from './data/DrumPads.json';\n\n// URL(s) for scripts to load\nconst test = \"https://cdn.freecodecamp.org/testable-projects-fcc/v1/bundle.js\";\n\n// Class: App\nclass App extends Component {\n  // Constructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n    }\n  }\n  \n  // Lifecycle: \n  componentDidMount() {\n    // Enable for testing, otherwise leave disabled\n    // this.loadScripts(test);\n  }\n\n  /** \n   * loads script into document \n   * @param {string} url - URL/source of script\n   */\n  loadScripts = (url) => {\n    const script = document.createElement(\"script\");\n    script.src = url;\n    script.async = true;\n    document.body.appendChild(script);\n  }\n\n  // Render\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <Display pads={pads} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}